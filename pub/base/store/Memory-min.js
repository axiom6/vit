var Memory,hasProp={}.hasOwnProperty;Memory=class{constructor(t){this.store=t,this.dbName=this.store.dbName}table(t){return this.store.table(t)}batch(t,e,r,s=null){var l,o;l=l=>{if(e.result=l,this.store.batchComplete(r))return null!=s?s(r):this.store.results(t,"batch",r)},o=function(){return!0},this.select(e.table,o,l)}add(t,e,r){this.table(t)[e]=r}get(t,e,r){var s;null!=(s=this.table(t)[e])?null!=r?r(s):this.store.results(t,"get",s,e):this.store.onerror(t,"get",{error:"Memory object no found"},e)}put(t,e,r){this.table(t)[e]=r}del(t,e){null!=this.table(t)[e]?delete this.table(t)[e]:this.store.onerror(t,"get",{error:"Memory object not found"},e)}insert(t,e){var r,s,l;for(r in l=this.table(t),e)hasProp.call(e,r)&&(s=e[r],l[r]=s)}select(t,e,r=null){var s,l;l=this.table(t),s=this.store.filter(l,e),null!=r?r(s):this.store.results(t,"select",s)}update(t,e){var r,s,l;for(r in l=this.table(t),e)hasProp.call(e,r)&&(s=e[r],l[r]=s)}remove(t,e){var r,s,l,o;for(r in l={},o=this.table(t))hasProp.call(o,r)&&e(s=o[r])&&(l[r]=s,delete o[r]);this.store.results(o,"remove",l)}open(t){}drop(t){}};export default Memory;