var Worker,cacheName,cacheObjs,worker,hasProp={}.hasOwnProperty;worker=new(Worker=class{constructor(t,e,s=!1){this.publish=this.publish.bind(this),this.onCatch=this.onCatch.bind(this),this.onInstall=this.onInstall.bind(this),this.onInstallAll=this.onInstallAll.bind(this),this.cacheUrlNotNeeded=this.cacheUrlNotNeeded.bind(this),this.onActivate=this.onActivate.bind(this),this.onFetch=this.onFetch.bind(this),this.onGet=this.onGet.bind(this),this.onPush=this.onPush.bind(this),this.onSync=this.onSync.bind(this),this.cacheName=t,this.cacheObjs=e,this.logPub=s,this.cacheUrls=this.toCacheUrls(this.cacheObjs),this.addEventListeners()}pushSyncParams(){this.pushTag="PushTest",this.pushUrl="/app/data/store/Push.json",this.cacheSync="Sync",this.syncTag="SyncTest",this.syncUrl="/app/data/store/Sync.json",this.offlineUrl="/augm.html"}toCacheUrls(t){var e,s,h;for(e in h=[],t)hasProp.call(t,e)&&(s=t[e],h.push(s.url));return h}publish(t,e,s=null){this.logPub&&(null!=s?console.log(t,e,s):console.log(t,e))}onCatch(t,e,s){console.error(t,e,s)}onInstall(t){t.waitUntil(caches.open(this.cacheName).then(t=>{var e,s,h;for(e in this.publish("Install","------ Open ------"),h=this.cacheObjs)hasProp.call(h,e)&&(s=h[e],fetch(s.url).then(e=>(s.cacheName=s.responseUrl=e.url,this.publish("  Install",e.status,s),t.put(e.url,e))))}).catch(t=>{this.onCatch("Install","Error",t)}))}onInstallAll(t){t.waitUntil(caches.open(this.cacheName).then(t=>(this.publish("InstallAll","Success",{cacheName:this.cacheName}),t.addAll(this.cacheUrls))).catch(t=>{this.onCatch("InstallAll'","Error",t)}))}cacheUrlNotNeeded(t){return"/app/augm/Augm.roll.js"===t}onActivate(t){t.waitUntil(caches.keys().then(t=>(this.cacheUrls=t,this.cacheUrls.filter(t=>this.cacheUrlNotNeeded(t)))).then(t=>Promise.all(t.map(t=>caches.delete(t)))).then(()=>(self.clients.claim(),this.publish("Activate","Success"))).catch(t=>{this.onCatch("Activate","Error",t)}))}onFetch(t){t.respondWith(caches.open(cacheName).then(e=>e.match(t.request,{ignoreSearch:!0}).then(s=>s||fetch(t.request).then(s=>(e.put(t.request,s.clone()),this.publish("Fetch","Success",{url:t.request.url}),s)))).catch(e=>this.onCatch("Fetch",t.request.url,e)))}onGet(t){"GET"===t.request.method&&(console.log("Worker.onGet()",t.request),t.respondWith(caches.match(t.request).then(e=>{var s;return s=fetch(t.request).then(e=>{var s;return s=e.clone(),caches.open(cacheName).then(e=>(e.put(t.request,s),this.publish("Get","Success"))),e}).catch(t=>(caches.match(offlinePage),this.onCatch("Get","Error",t))),e||s})))}onPush(t){t.data.text()===this.pushTag&&t.waitUntil(caches.open(cacheName)).then(t=>fetch(pushUrl).then(e=>{var s;return t.put(pushUrl,e.clone()),s=e.json(),this.publish("Push",pushTag,{json:s}),s}))}onSync(t){t.tag===this.syncTag&&t.waitUntil(caches.open(cacheSync).then(t=>t.add(syncUrl)))}addEventListeners(){return self.addEventListener("install",this.onInstall),self.addEventListener("activate",this.onActivate),self.addEventListener("fetch",this.onFetch)}})(cacheName="Muse",cacheObjs={Html:{name:"Html",status:0,url:"/muse.html"},Muse:{name:"Muse",status:0,url:"/Muse.js"},Vue:{name:"Vue",status:0,url:"../../lib/vue/vue.esm.browser.js"},VueRouter:{name:"VueRouter",status:0,url:"../../lib/vue/vue-router.esm.js"},Roboto:{name:"Roboto",status:0,url:"../../css/font/roboto/Roboto.css"},Roll:{name:"Roll",status:0,url:"/Roll.js"}},!0);