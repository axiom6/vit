var Stream,hasProp={}.hasOwnProperty;import Util from"./Util.js";Stream=class{constructor(s,e){var r,t,i,b;for(this.subjectNames=s,this.info=e,this.subjects={},!1===this.allInfo&&this.unsubscribeAll,r=0,t=(i=this.subjectNames).length;r<t;r++)b=i[r],this.addSubject(b)}subscribe(s,e,r){this.getSubject(s,!1).subscribers[e]=r,this.isInfo(s,"subscribe")&&console.info("Strean.subscribe()",{subject:s,subscriber:e})}publish(s,e){var r,t;for(t in r=this.getSubject(s,!1).subscribers)hasProp.call(r,t)&&(0,r[t])(e);this.isInfo(s,"publish")&&console.info("Stream.publish()",{subject:s,object:e})}event(s,e,r,t){var i;i=r=>{null!=r&&r.stopPropagation(),null!=r&&r.preventDefault(),this.publish(s,e)},r.addEventListener(t,i)}complete(s,e,r,t,i){var b,c,u,o,n;for(n in(o=this.getSubject(s,!1))[r]={},c=o.subscribers)hasProp.call(c,n)&&(b=c[n],o[r][n]=!1);for(n in u=o.subscribers)hasProp.call(u,n)&&(b=u[n],(e=>{var c;if(b(e),o[r][n]=!0,this.isComplete(o,r)&&(t(i),this.isInfo(s,"complete")))return c={subject:s,object:e,complete:r,completeObject:i},console.info("Stream.complete()",c)})(e))}isComplete(s,e){var r,t;for(t in r=s[e])if(hasProp.call(r,t)&&!1===r[t])return!1;return!0}unsubscribe(s,e){this.hasSubject(s)?this.hasSubscriber(s,e)?delete this.subjects[s].subscribers[e]:console.error("Strean.unsubscribe() unknown subscriber",{subject:s,subscriber:e}):console.error("Strean.unsubscribe() unknown subject",{subject:s,subscriber:e}),this.isInfo(s,"subscribe")&&console.info("Stream.unsubscribe()",{subject:s,subscriber:e})}unsubscribeAll(){var s,e,r,t;for(r in s=this.subjects)if(hasProp.call(s,r))for(t in e=s[r].subscribers)hasProp.call(e,t)&&(e[t],this.unsubscribe(r,t))}addSubject(s,e=!0){var r;this.hasSubject(s)?e&&console.warn("Stream.addSubject() subject already exists",s):((r={}).subscribers={},this.subjects[s]=r)}hasSubject(s){return null!=this.subjects[s]}hasSubscriber(s,e){return this.hasSubject(s)&&null!=this.subjects[s].subscribers[e]}getSubject(s,e=!0){return this.hasSubject(s)||(e&&console.warn("Stream.getSubject() unknown name for subject so creating one for",s),this.addSubject(s,!1)),this.subjects[s]}isInfo(s,e){return Util.inArray(this.info.subjects,s)&&null!=this.info[e]&&this.info[e]}allInfo(){var s,e,r,t,i;for(t in console.info("--- Stream.Subjects --- "),s=this.subjects)if(hasProp.call(s,t))for(i in r=s[t],console.info("  Subject "+t),e=r.subscribers)hasProp.call(e,i)&&(e[i],console.info("    Subscriber "+i))}};export default Stream;